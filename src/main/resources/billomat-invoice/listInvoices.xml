<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!-- Method Documentation URL: http://www.billomat.com/en/api/invoices -->
<template name="listInvoices" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="clientId" description="Filter results by ID of the client."/>
    <parameter name="contactId" description="Filter results by ID of the contact."/>
    <parameter name="invoiceNumber" description="Filter results by Invoice number."/>
    <parameter name="status"
               description="Filter results by Status (DRAFT, OPEN, PAID, OVERDUE, CANCELED). More than one statuses could be given as a comma separated list. Theses statuses will be logically OR-connected."/>
    <parameter name="paymentType"
               description="Filter results by Payment Type (eg. CASH, BANK_TRANSFER, PAYPAL, ...). More than one payment type could be given as a comma separated list. Theses payment types will be logically OR-connected."/>
    <parameter name="from" description="Only show invoices since this date (format YYYY-MM-DD)."/>
    <parameter name="to" description="Only show invoices up to this date (format YYYY-MM-DD)."/>
    <parameter name="label" description="Free text search in label text."/>
    <parameter name="introduction" description="Free text search in introductory text."/>
    <parameter name="note" description="Free text search in explanatory notes."/>
    <parameter name="tags" description="Comma seperated list of tags."/>
    <parameter name="articleId" description="Filter results by ID of an article."/>
    <parameter name="groupBy" description="Invoices can also be found grouped together based on the provided value."/>
    <parameter name="page" description="No. of the page to return. Applies for paginated response."/>
    <parameter name="perPage" description="No. of entries to return per page when results are paginated."/>
    <parameter name="orderBy" description="Sorting orders to retrieve invoices"/>
    <sequence>
        <property name="uri.var.clientId" expression="$func:clientId"/>
        <property name="uri.var.contactId" expression="$func:contactId"/>
        <property name="uri.var.invoiceNumber" expression="$func:invoiceNumber"/>
        <property name="uri.var.status" expression="$func:status"/>
        <property name="uri.var.paymentType" expression="$func:paymentType"/>
        <property name="uri.var.from" expression="$func:from"/>
        <property name="uri.var.to" expression="$func:to"/>
        <property name="uri.var.label" expression="$func:label"/>
        <property name="uri.var.introduction" expression="$func:introduction"/>
        <property name="uri.var.note" expression="$func:note"/>
        <property name="uri.var.tags" expression="$func:tags"/>
        <property name="uri.var.articleId" expression="$func:articleId"/>
        <property name="uri.var.groupBy" expression="$func:groupBy"/>
        <property name="uri.var.page" expression="$func:page"/>
        <property name="uri.var.perPage" expression="$func:perPage"/>
        <property name="uri.var.orderBy" expression="$func:orderBy"/>
        <script language="js">
            <![CDATA[
            var note = mc.getProperty('uri.var.note');
            var clientId = mc.getProperty('uri.var.clientId');
            var apiKey = mc.getProperty('uri.var.apiKey');
            var contactId = mc.getProperty('uri.var.contactId');
            var articleId = mc.getProperty('uri.var.articleId');
            var label = mc.getProperty('uri.var.label');
            var groupBy = mc.getProperty('uri.var.groupBy');
            var paymentType = mc.getProperty('uri.var.paymentType');
            var tags = mc.getProperty('uri.var.tags');
            var perPage = mc.getProperty('uri.var.perPage');
            var introduction = mc.getProperty('uri.var.introduction');
            var invoiceNumber = mc.getProperty('uri.var.invoiceNumber');
            var from = mc.getProperty('uri.var.from');
            var to = mc.getProperty('uri.var.to');
            var page = mc.getProperty('uri.var.page');
            var status = mc.getProperty('uri.var.status');
            var orderBy = mc.getProperty('uri.var.orderBy');
            var urlQuery = '';
            if (clientId != null && clientId != "") {
               urlQuery += 'client_id=' + clientId + '&';
            }
            if (contactId != null && contactId != "") {
               urlQuery += 'contact_id=' + contactId + '&';
            }
            if (invoiceNumber != null && invoiceNumber != "") {
               urlQuery += 'invoice_number=' + invoiceNumber + '&';
            }
            if (status != null && status != "") {
               urlQuery += 'status=' + status + '&';
            }
            if (paymentType != null && paymentType != "") {
               urlQuery += 'payment_type=' + paymentType + '&';
            }
            if (from != null && from != "") {
               urlQuery += 'from=' + from + '&';
            }
            if (to != null && to != "") {
               urlQuery += 'to=' + to + '&';
            }
            if (label != null && label != "") {
               urlQuery += 'label=' + label + '&';
            }
            if (introduction != null && introduction != "") {
               urlQuery += 'intro=' + introduction + '&';
            }
            if (note != null && note != "") {
               urlQuery += 'note=' + note + '&';
            }
            if (tags != null && tags != "") {
               urlQuery += 'tags=' + tags + '&';
            }
            if (articleId != null && articleId != "") {
               urlQuery += 'article_id=' + articleId + '&';
            }
            if (groupBy != null && groupBy != "") {
               urlQuery += 'group_by=' + groupBy + '&';
            }
            if (page != null && page != "") {
               urlQuery += 'page=' + page + '&';
            }
            if (perPage != null && perPage != "") {
               urlQuery += 'per_page=' + perPage + '&';
            }
            if (orderBy != null && orderBy != "") {
               urlQuery += '&order_by=' + orderBy + '&';
            }
            if (apiKey != null && apiKey != "") {
               urlQuery += 'api_key=' + apiKey + '&';
            }
            // Add a leading '?' and remove the trailing '&'
            if (urlQuery != "") {
               urlQuery = '?' + urlQuery.toString().substring(0, urlQuery.toString().lastIndexOf("&"));
               mc.setProperty('uri.var.urlQuery', urlQuery);
            }
         ]]>
        </script>
        <call>
            <endpoint>
                <http method="get" uri-template="{+uri.var.apiUrl}/invoices{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Reset" action="remove" scope="transport"/>
        <header name="X-Rate-Limit-Remaining" action="remove" scope="transport"/>
        <header name="Vary" action="remove" scope="transport"/>
        <header name="Strict-Transport-Security" action="remove" scope="transport"/>
        <header name="Pragma" action="remove" scope="transport"/>
        <header name="Access-Control-Allow-Headers" action="remove" scope="transport"/>
        <header name="Access-Control-Max-Age" action="remove" scope="transport"/>
        <header name="Cache-Control" action="remove" scope="transport"/>
        <header name="Access-Control-Allow-Methods" action="remove" scope="transport"/>
        <header name="Access-Control-Allow-Origin" action="remove" scope="transport"/>
    </sequence>
</template>
